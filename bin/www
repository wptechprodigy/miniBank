#!/usr/bin/env node

/**
 * Read environment variables
 */
require('dotenv').config();

/**
 * Believe it or not, reading process.env is expensive in NODE.js
 * https://github.com/nodejs/node/issues/3104
 * We want to cache process.env to a regular object since we don't expect it to change at runtime anyway.
 */
process.env = JSON.parse(JSON.stringify(process.env));

/**
 * Module dependencies.
 */

const app = require('../dist/app').default;
const debug = require('debug')('nert:server');
const http = require('http');
const mongoose = require('mongoose');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3005');
app.set('port', port);

/**
 * Use mongoose to connect to MongoDB
 */
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

mongoose.connection.on('connected', onMongoConnected);
mongoose.connection.on('disconnected', onMongoDisconnected);
mongoose.connection.on('error', onMongoError);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const portNumber = parseInt(val, 10);

  if (isNaN(portNumber)) {
    // named pipe
    return val;
  }

  if (portNumber >= 0) {
    // port number
    return portNumber;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Event listener for MongoDB server successful connection
 */
function onMongoConnected() {
  // debug('MongoDB connected successfully.');
  console.log('MongoDB connected successfully.');
}

/**
 * Event listener for MongoDB server disconnection
 */
function onMongoDisconnected(err) {
  debug('MongoDB Disconnected - %o', err);
}

/**
 * Event listener for MongoDB server error
 */
function onMongoError(err) {
  console.error('MongoDB error', err);
}
